# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ui/dashboard.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import gpsd
from geopy.geocoders import Nominatim
import vlc
from threading import Thread
import time
from datetime import datetime

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        
        # Setup font database
        QtGui.QFontDatabase.addApplicationFont("fonts/RIDGE-LIGHT-OBLIQUE.otf")
        QtGui.QFontDatabase.addApplicationFont("fonts/Ridge-Bold-Oblique.otf")
        
        self.light_30_font = QtGui.QFont("RIDGE-LIGHT-OBLIQUE", 30)
        self.light_20_font = QtGui.QFont("RIDGE-LIGHT-OBLIQUE", 20)
        self.speed_font = QtGui.QFont("Ridge-Bold-Oblique", 120)

        # Set up the main window
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1024, 600)
        MainWindow.setMinimumSize(QtCore.QSize(1024, 600))
        MainWindow.setMaximumSize(QtCore.QSize(1024, 600))
        MainWindow.setTabletTracking(True)
        MainWindow.setStyleSheet("background-color: rgb(9, 8, 4);")

        # Set up the central widget (main container)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        # Set up tab widget
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(-10, -30, 1041, 631))
        self.tabWidget.setObjectName("tabWidget")


        # Setting up Tab 1: Main dashboard
        self.mainDash = QtWidgets.QWidget()
        self.mainDash.setObjectName("mainDash")

        # Location label
        self.locationLabel = QtWidgets.QLabel(self.mainDash)
        self.locationLabel.setGeometry(QtCore.QRect(80, 430, 231, 51))
        self.locationLabel.setFont(self.light_30_font)
        self.locationLabel.setStyleSheet("color:#464646;")
        self.locationLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.locationLabel.setObjectName("locationLabel")

        self.locationValueLabel = QtWidgets.QLabel(self.mainDash)
        self.locationValueLabel.setGeometry(QtCore.QRect(10, 480, 371, 41))
        self.locationValueLabel.setFont(self.light_20_font)
        self.locationValueLabel.setStyleSheet("color: rgb(255, 255, 255);")
        self.locationValueLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.locationValueLabel.setObjectName("locationValueLabel")
        
        # Outside temperature label
        self.outTempLabel = QtWidgets.QLabel(self.mainDash)
        self.outTempLabel.setGeometry(QtCore.QRect(730, 430, 231, 51))
        self.outTempLabel.setFont(self.light_30_font)
        self.outTempLabel.setStyleSheet("color:#464646;")
        self.outTempLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.outTempLabel.setObjectName("outTempLabel")

        self.outTempValLabel = QtWidgets.QLabel(self.mainDash)
        self.outTempValLabel.setGeometry(QtCore.QRect(650, 480, 381, 41))
        self.outTempValLabel.setFont(self.light_20_font)
        self.outTempValLabel.setStyleSheet("color: rgb(255, 255, 255);")
        self.outTempValLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.outTempValLabel.setObjectName("outTempValLabel")

        # Speedometer
        self.speedLabel = QtWidgets.QLabel(self.mainDash)
        self.speedLabel.setGeometry(QtCore.QRect(390, 155, 251, 171))
        self.speedLabel.setFont(self.speed_font)
        self.speedLabel.setStyleSheet("color: rgb(255, 255, 255);")
        self.speedLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.speedLabel.setObjectName("speedLabel")
        self.speedCircle = QtWidgets.QFrame(self.mainDash)
        self.speedCircle.setGeometry(QtCore.QRect(360, 110, 311, 311))
        self.speedCircle.setStyleSheet("QFrame{\n"
        "    border: 5px solid rgb(1, 203, 238);\n"
        "    background-color: none;\n"
        "    border-radius: 150px;\n"
        "}")
        self.speedCircle.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.speedCircle.setFrameShadow(QtWidgets.QFrame.Raised)
        self.speedCircle.setObjectName("speedCircle")
        self.kmhLabel = QtWidgets.QLabel(self.mainDash)
        self.kmhLabel.setGeometry(QtCore.QRect(470, 300, 91, 51))
        self.kmhLabel.setFont(self.light_30_font)
        self.kmhLabel.setStyleSheet("color:white;")
        self.kmhLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.kmhLabel.setObjectName("kmhLabel")
        self.timeLabel = QtWidgets.QLabel(self.mainDash)
        self.timeLabel.setGeometry(QtCore.QRect(410, 0, 211, 71))
        
        # Time label
        self.timeLabel.setFont(self.light_30_font)
        self.timeLabel.setStyleSheet("color: rgb(255, 255, 255);")
        self.timeLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.timeLabel.setObjectName("timeLabel")
        

        # Setting up Tab 2: Camera View
        self.tabWidget.addTab(self.mainDash, "")
        self.cameraView = QtWidgets.QWidget()
        self.cameraView.setObjectName("cameraView")
        self.cameraFrame = QtWidgets.QLabel(self.cameraView)
        self.cameraFrame.setGeometry(QtCore.QRect(6, 2, 751, 591))
        self.cameraFrame.setObjectName("cameraFrame")
        self.tabWidget.addTab(self.cameraView, "")
        
        # General setup
        MainWindow.setCentralWidget(self.centralwidget)
        self.initialize_ui(MainWindow)
        self.tabWidget.setCurrentIndex(0)   # Launch the GUI with Tab 1 selected
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def initialize_ui(self, MainWindow):
        """
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Dashboard"))
        self.speedLabel.setText(_translate("MainWindow", "37"))
        self.kmhLabel.setText(_translate("MainWindow", "KMH"))
        self.timeLabel.setText(_translate("MainWindow", "8:36 PM"))
        self.locationValueLabel.setText(_translate("MainWindow", "SOME STREET"))
        """
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Dashboard"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.mainDash), _translate("MainWindow", "Main Dash"))
        self.cameraFrame.setText(_translate("MainWindow", "TextLabel"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.cameraView), _translate("MainWindow", "Camera View"))
        self.locationLabel.setText(_translate("MainWindow", "LOCATION"))
        self.outTempLabel.setText(_translate("MainWindow", "OUT TEMP"))
        self.kmhLabel.setText(_translate("MainWindow", "KMH"))
        self.outTempValLabel.setText(_translate("MainWindow", "+ 25 C"))

        # Update speed every second
        self.speed_thread = Thread(target=self.update_speed)
        # Update location every 10 seconds
        self.location_thread = Thread(target=self.update_location)
        # Update time every second
        self.time_thread = Thread(target=self.update_time)
        
        self.update_speed_started = True
        self.update_location_started = True
        self.update_time_started = True

        self.speed_thread.start()
        self.location_thread.start()
        self.time_thread.start()
    
    def play_startup_sound(self):
        player = vlc.MediaPlayer("sounds/startup_chime.mp3")
        player.play()

    def initialize_gps(self):
        print("Initializing GPS...")
        # TODO: Check for GPS status
        gpsd.connect()
    
    def get_time(self):
        """
        # Get gps packet
        gps_packet = gpsd.get_current()
        # Extract time
        date_time = str(gps_packet.time)
    
        split_list = date_time.split("T")
        gps_time = split_list[1]
        hour_minute = gps_time.split(":")
        hour = hour_minute[0]
        minute = hour_minute[1]
        return f"{hour}:{minute} {'PM' if int(hour) > 11 else 'AM'}"
        """
        now = datetime.now()
        military_hour = now.strftime("%H")
        hour = (int(military_hour) - 2) % 10
        minute = now.strftime("%M")
        return f"{hour}:{minute} {'PM' if int(military_hour) > 11 else 'AM'}"

    
    def get_speed(self):
        # Get gps packet
        gps_packet = gpsd.get_current()
        # Extract speed
        speed_mph = float(gps_packet.hspeed)
        # Convert speed to int and kmh
        speed_kmh_int = int(speed_mph * 1.609344)
        print(f"Current speed: {speed_kmh_int}")
        return speed_kmh_int
    
    def get_current_suberb(self):
        # Initialize Nominatim API
        geolocator = Nominatim(user_agent="smartGoKart")
        # Get gps packet
        gps_packet = gpsd.get_current()
        # Get latitude and longitude
        latitude = str(gps_packet.lat)
        longitude = str(gps_packet.lon)
        # Retrieve street
        location = geolocator.reverse(latitude+","+longitude, language="en")
        address = location.raw['address']
        return address.get('suburb', '')

    def update_speed(self):
        while self.update_speed_started:
            # Set current speed
            self.speedLabel.setText(str(self.get_speed()))
            time.sleep(1)
    
    def update_location(self):
        while self.update_location_started:
            # Set current suburb
            self.locationValueLabel.setText(self.get_current_suberb())
            time.sleep(1)
    
    def update_time(self):
        while self.update_time_started:
            # Set current time
            self.timeLabel.setText(self.get_time())
            time.sleep(1)

    def stop(self):
        print("Exiting...")
        self.update_location_started = False
        self.update_speed_started = False
        self.update_time_started = False
        
        self.speed_thread.join()
        self.location_thread.join()
